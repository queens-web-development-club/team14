---
let members = '20';
let photos = '100';
let events = '50';
let memories = '80';
---

<div class="stat-bar-container">
    <section>
        <div>
            <p class="num" data-target={members}>0</p>
            <p class="stat">Members</p>
        </div>
        <div>
            <p class="num" data-target={photos}>0</p>
            <p class="stat">Photographs</p>
        </div>
        <div>
            <p class="num" data-target={events}>0</p>
            <p class="stat">Club Events</p>
        </div>
        <div>
            <p class="num" data-target={memories}>20</p>
            <p class="stat">Memories</p>
        </div>
    </section>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        setTimeout(setupObserver, 500);     // Wait 500ms after DOM Content loads to ensure proper behaviour on main page due to loading
        function setupObserver() {
            const counters = document.querySelectorAll('.num');
            const options = { threshold: 1 };   // Specify callback is only to be triggered when the entire target element is visible
            
            const callback = (entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {     // Target is on screen
                        const counter = entry.target;   // The HTML element being observed
                        const target = +counter.getAttribute('data-target');    // unary plus operator to turn string to number
                        const duration = 1000;     // Total duration of the count in ms
                        const updateInterval = 50; 
                        let start = 0;
                        
                        const increment = target / (duration / updateInterval);
                        
                        const count = () => {
                            start += increment;
                            counter.innerText = Math.round(start);
                            
                            if (start < target) {
                                setTimeout(count, updateInterval);
                            } else {
                                counter.innerText = target + '+';
                            }
                        };
                        
                        count();
                        observer.unobserve(counter);
                    }
                });
            };
            
            // Observe all counter elements
            const observer = new IntersectionObserver(callback, options);
            counters.forEach(counter => {
                observer.observe(counter);
            });
        }
    });
</script>

<style>
    .stat-bar-container {
        background-color: #5E0000;
        padding: 3vh 0;
        display: flex;
        justify-content: center;
        margin-bottom: 6vh;
    }

    section {
        width: 70%;
        display: flex;
        justify-content: space-between;
    }

    section div {
        /* text-decoration: none; */
        text-align: center;
    }

    .num {
        font-family: 'Inter';
        font-size: 2.5rem;
        font-weight: 700;
        letter-spacing: 1px;
        color: white;
        padding-left: 7.5%;
    }
    .stat {
        font-family: 'Inter';
        font-size: 1.5rem;
        font-weight: 600;
        color: white;
    }
</style>